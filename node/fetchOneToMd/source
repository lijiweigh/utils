<div class="post-4588 post type-post status-publish format-standard hentry category-css tag-bfc tag-displayinline-block tag-displaytable-cell tag-inline-block tag-overflowhidden tag-table-cell tag-231 tag-33 tag-979" id="post-4588">
			<h2 class="single-h" style="font-size:1.9021739130435em;">CSS深入理解流体特性和BFC特性下多栏自适应布局</h2>			<div class="entry">
				<p style="margin-top:-5px;"><small>这篇文章发布于 2015年02月12日，星期四，23:36，归类于 <a href="https://www.zhangxinxu.com/wordpress/category/css/" rel="category tag">CSS相关</a>。                        阅读 149581 次, 今日 13 次                        <a href="#comments" class="top-comm-a">59 条评论</a></small></p>
				<!-- 导航 -->
				<div class="entry-nav">&nbsp;<div id="entryNav" class="title-nav-ul"></div></div>
				<article><p class="link" style="display: block;"><a href="http://www.mawen.co/?utm_source=zxx-web-2020" style="color:#de0000;font-size:16px;" target="_blank" rel="nofollow noopener" onclick="_gaq.push(['_trackEvent', 'GITEE', 'click', 'ARTICLE TOP']);">2020年阿里最新面试题汇总免费领取</a></p>
<h3>一、开篇之言</h3>
<p>要说web上实现两栏自适应布局的方法，一双手都数不过来。不知大家有没有细想过，为什么这些方法可以实现自适应布局呢？<img src="https://mat1.gtimg.com/www/mb/images/face/32.gif" align="absmiddle"></p>
<p>本文就将深入探讨下流体特性和BFC特性下的两栏自适应布局，还是针对传统布局。一些现代布局，如弹性盒子模型布局(Flexbox Layout)，格栅布局(Grid Layout)不在本文探讨之类。</p>
<blockquote><p>有些人看了个标题，以及看了前面一两段，发现，都是我知道的概念嘛，什么流动性，什么BFC~~于是，就悻悻离开了。这就是我们常说的浮躁，保持一颗谦逊的心，细细阅读，你会发现，其中一定有你所没有关注过的地方，所谓三人行必有我师。没错，这句话就是写给你看的，同时也是自我内省与监督。</p></blockquote>
<h3>二、块状元素的流体特性与自适应布局</h3>
<p><strong>流体特性</strong><br>
块状水平元素，如<code>div</code>元素（下同），在默认情况下（非浮动、绝对定位等），水平方向会自动填满外部的容器；如果有<code>margin-left/margin-right</code>, <code>padding-left/padding-right</code>, <code>border-left-width/border-right-width</code>等，实际内容区域会响应变窄。</p>
<p>一图胜千言，一例胜千图。可参考下面例子，感受下<code>div</code>元素的流体特性：</p>
<p><iframe src="https://www.zhangxinxu.com/study/201502/div-flow.html" width="510" height="520" frameborder="0"></iframe></p>
<p>图片宽度一直<code>width:100%</code>，依次点击3个按钮，结果随着<code>margin</code>, <code>padding</code>, <code>border</code>的出现，其可用宽度自动跟着减小，形成了自适应效果。就像放在容器中的水流一样，内容区域会随着<code>margin</code>, <code>padding</code>, <code>border</code>的出现自动填满剩余空间，这就是块状元素的流体特性。</p>
<p><strong>流体特性</strong><br>
下面，我们稍微做一个调整，<code>div</code>距离容器左侧<code>margin</code> <code>150</code>像素，里面的图片同样<code>100%</code>自适应内容区域。HTML如下：</p>
<div class="zhxx_code">
<pre>.flow-box {
    width: 500px; background-color: #eee; overflow:auto; resize:horizontal;
}
.flow-content {
    margin-left: 150px;
}
</pre>
</div>
<div class="zhxx_code">
<pre>&lt;div class="flow-box"&gt;
    &lt;div class="flow-content"&gt;&lt;img src="mm1.jpg" width="100%" height="190"&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</div>
<p><iframe src="https://www.zhangxinxu.com/study/201502/margin-left.html" width="100%" height="215" frameborder="0"></iframe></p>
<p>图片右下角有两道斜杠，我们可以resize拉伸（现代浏览器，且非移动访问），会发现，左侧永远150像素留白，而图片随着容器宽度变化而自适应变化了。</p>
<p>此时，我们需要好好利用左侧150像素的留白间距，岂不是就可以实现两栏自适应效果！？</p>
<p>为了不影响原本的流体特性，我们可以使用破坏性属性，如浮动(float:left)，或者绝对定位(position:absolute)。</p>
<p>我们直接HTML如下调整即可：</p>
<div class="zhxx_code">
<pre>&lt;div class="flow-box"&gt;
    &lt;img src="mm1.jpg" width="128" style="float:left;"&gt;
    &lt;div class="flow-content"&gt;&lt;img src="mm1.jpg" width="100%" height="190"&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</div>
<div class="zhxx_code">
<pre>&lt;div class="flow-box"&gt;
    &lt;img src="mm1.jpg" width="128" style="position:absolute;"&gt;
    &lt;div class="flow-content"&gt;&lt;img src="mm1.jpg" width="100%" height="190"&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</div>
<p>结果分别如下：<br>
<iframe src="https://www.zhangxinxu.com/study/201502/float-flow.html" width="100%" height="215" frameborder="0"></iframe><br>
<iframe src="https://www.zhangxinxu.com/study/201502/absolute-flow.html" width="100%" height="215" frameborder="0"></iframe></p>
<p>当然，你可以左侧有多个浮动，或者左浮动+右浮动。于是，我们不仅可以实现两栏自适应效果，多栏自适应效果也不在话下。</p>
<p>然而，利用块状元素流体特性实现的自适应布局有个不足，就是，我们需要知道浮动或绝对定位内容的尺寸。然后，流体内容才能有对应的<code>margin</code>或<code>padding</code>或<code>border</code>值进行位置修正。于是，问题来了，我们没法单纯使用一个公用的类名，类似<code>.clearfix</code>这样，整站通用。因为不同自适应场景的留白距离是不一样的。</p>
<p>此时，我们可以利用块状元素的BFC特定实现更强大更智能的多栏自适应布局（本文重点）。</p>
<h3>三、元素的BFC特性与自适应布局</h3>
<p><strong>1. BFC元素简介与基本表现</strong><br>
BFC全称”Block Formatting Context”, 中文为“块级格式化上下文”。啪啦啪啦特性什么的，一言难尽，大家可以自行去查找，我这里不详述，免得乱了主次，总之，记住这么一句话：BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素。所以，避免margin穿透啊，清除浮动什么的也好理解了。</p>
<p><img src="https://image.zhangxinxu.com/image/blog/201502/inner-outer.png" width="672" height="312" alt="抱诈（和谐）与钓鱼" class="imgpad mt10"></p>
<p>什么时候会触发BFC呢？常见的如下：</p>
<ul>
<li><code>float</code>的值不为<code>none</code>。</li>
<li><code>overflow</code>的值为<code>auto</code>,<code>scroll</code>或<code>hidden</code>。</li>
<li><code>display</code>的值为<code>table-cell</code>, <code>table-caption</code>, <code>inline-block</code>中的任何一个。</li>
<li><code>position</code>的值不为<code>relative</code>和<code>static</code>。</li>
</ul>
<p>BFC特性很多，而我们这里，只关心一个，和<code>float</code>元素做相邻兄弟时候的表现。</p>
<p>如果是上面介绍的流体特性<code>div</code>, 当其和浮动元素当兄弟的时候，是覆盖的关系（可以脑补下文字环绕图片效果）。但是，元素BFC化后，本着“里面惊天抱诈（和谐）炸成鬼，外面依然泰然钓大鱼”的原则，自然是不会与浮动重叠的（你想啊，要是出来个<code>clear:both</code>还不跟外面浮动干上一架啊），因此，块状相邻，点击下面按钮感受下。<br>
<iframe src="https://www.zhangxinxu.com/study/201502/flow-to-bfc.html" width="100%" height="180" frameborder="0"></iframe></p>
<p>会发现，普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文。如下截图：<br>
<img src="https://image.zhangxinxu.com/image/blog/201502/2015-02-10_003132.png" width="438" height="165" alt="BFC与浮动边缘对齐~" class="alignnone"></p>
<p>同时，<strong>元素原本的流体特性依然保留了</strong>。哈，这个很重要，也就是，虽然不与浮动交集，自动退避浮动元素宽度的距离，但，本身作为普通元素的流动性依然存在，反映在布局上就是自动填满除去浮动内容以外的剩余空间。哟，这不就是自适应布局嘛！！</p>
<p><strong>2. BFC自适应布局模块间的间距</strong><br>
然而，模块过于亲密接触，可能不是我们想要的。一般而言，我们需要一点间距。</p>
<p>说到间距，我们的第一反应就是<code>margin</code>. 于是，我们给BFC元素增加一个<code>margin-left:20px</code>, CSS代码如下：</p>
<div class="zhxx_code">
<pre>.float-left {
    float: left;
}
.follow-content {
    <span style="color:#cd0000;">margin-left: 20px;</span>
    background-color: #cad5eb;
    overflow: hidden;
}</pre>
</div>
<p>结果……纳尼~ <img src="https://mat1.gtimg.com/www/mb/images/face/110.gif" align="absmiddle"> 怎么还是像狗屁膏药贴在一起啊？？<br>
<img src="https://image.zhangxinxu.com/image/blog/201502/2015-02-12_001810.png" width="432" height="182" alt="margin-left:20px无效截图" class="alignnone"></p>
<p>您可以狠狠地点击这里：<a href="https://www.zhangxinxu.com/study/201502/flow-to-bfc-margin.html" class="a_link" target="_blank">BFC元素增加一个margin无效demo</a></p>
<p>实际上，这里的<strong>margin并不是无效，而是值不够大</strong>，鞭长莫及啊！</p>
<p><img src="https://image.zhangxinxu.com/image/blog/201502/bianchangmoji.jpg" width="300" height="164" alt="朕真是鞭长莫及" class="alignnone"></p>
<p>用一个形象的Gif表示就是下面这样（点击播放-468K）：<br>
<img src="https://image.zhangxinxu.com/image/blog/201910/kick-girl.gif" width="180" height="200" alt="女生拳打脚踢够不到男孩" onclick="this.src=this.src.replace('.jpg','.gif')" class="alignnone"></p>
<p>左侧浮动的图片就好比上面Gif图片中男孩的胳膊，妹子就是BFC元素，结果两人紧密接触。然后，<code>margin-left</code>就是妹子的胳膊个脚，虽然也甩出去了，可惜长度有限，于是，毫无影响。</p>
<p>如果按照上面的解释，那我们把<code>margin-left:20px</code>改成<code>margin-left:150px</code>就应该有间距了？<img src="https://mat1.gtimg.com/www/mb/images/face/32.gif" align="absmiddle"> 一试便知！</p>
<div class="zhxx_code">
<pre>.float-left {
    float: left;
}
.follow-content {
    <span style="color:#cd0000;">margin-left: 150px;</span>
    background-color: #cad5eb;
    overflow: hidden;
}</pre>
</div>
<p>结果，当当当当：<br>
<img src="https://image.zhangxinxu.com/image/blog/201502/2015-02-12_003900.png" width="431" height="179" alt="margin值很大收获的间距" class="alignnone"></p>
<p><strong>注意：</strong>我这里举<code>margin</code>这个例子，不是让大家这样使用，只是为了让大家可以深入理解BFC元素与浮动元素混排的特性表现。实际开发，我们完全没有必要对BFC元素设置<code>margin</code>, 因为又回到了流体布局，明明是固定的15像素间距，但是，每个布局都要写一个不同的<code>margin</code>值，完全没有重用价值。</p>
<p>但是，间距部分的高潮来了！</p>
<p>我们可以使用浮动元素的<code>margin-right</code>或者<code>padding-right</code>轻松实现间距效果。间距是<code>20</code>像素，直接：</p>
<div class="zhxx_code">
<pre>.float-left {
    float: left;
    <span style="color:#cd0000;">margin-right: 20px;</span>
}</pre>
</div>
<p>与浮动元素的宽度是多少没有任何关系。不仅如此，我们还可以使用BFC元素的<code>padding-left</code>撑开间距（虽然<code>margin-left</code>作用鸡肋）。</p>
<p>于是，我们可能就会有：</p>
<div class="zhxx_code">
<pre>.l { float: left; }
.ovh { overflow: hidden; }
</pre>
</div>
<p>的自适应固定搭配。再配合<a href="https://github.com/zhangxinxu/zxx.lib.css" target="_blank">zxx.lib.css</a>CSS样式库的<code>margin</code>和<code>padding</code>家族，快速布局可谓所向披靡。</p>
<p><strong>3. 与纯流体特性布局的优势</strong><br>
BFC自适应布局优势我总结了下面2点：</p>
<ol>
<li>自适应内容由于封闭，更健壮，容错性强。比方说，内部<code>clear:both</code>不会与兄弟<code>float</code>产生矛盾。而纯流体布局，<code>clear:both</code>会让后面内容无法和<code>float</code>元素在一个水平上，产生布局问题。</li>
<li>自适应内容自动填满浮动以为区域，无需关心浮动元素宽度，可以整站大规模应用。而纯流体布局，需要大小不确定的<code>margin</code>/<code>padding</code>等值撑开合适间距，无法CSS组件化。</li>
</ol>
<p>如下效果，图片能大能小，布局依然良好：</p>
<p><iframe src="https://www.zhangxinxu.com/study/201502/flow-to-bfc-animation.html" width="400" height="216" frameborder="0"></iframe></p>
<p>而CSS代码就是非常简单的：</p>
<div class="zhxx_code">
<pre>.float-left {
    <span style="color:#cd0000;">float: left;</span> margin-right: 20px; 
}
.bfc-content {
    <span style="color:#cd0000;">overflow: hidden;</span> background-color: #beceeb;
}</pre>
</div>
<p>可以说，有了BFC自适应布局，基本上没有了纯流体特性布局存在的价值。然而，只是理论上如此。如果，BFC自适应布局真那么吊炸天，那为何并没有口口相传呢？</p>
<p>那我们就得进一步深入理解了。</p>
<p><strong>4. BFC元素家族与自适应布局面面观</strong><br>
理论上，任何BFC元素和浮动搞基的时候，都可以实现自动填充的自适应布局。</p>
<p>但是，由于绝大多数的触发BFC的属性自身有一些古怪的特性，所以，实际操作的时候，能兼顾流体特性和BFC特性来实现无敌自适应布局的属性并不多。下面我们牵驴遛马一个一个瞅瞅（类似行为仅出1个代表示意，你懂的，如<code>float:left/right</code>）：</p>
<ol>
<li><strong>float:left</strong> 浮动元素本身BFC化，然而浮动元素有破坏性和包裹性，失去了元素本身的流体自适应性，因此，无法用来实现自动填满容器的自适应布局。不过，其因兼容性还算良好，与堆积木这种现实认知匹配，上手简单，因此在旧时代被大肆使用，也就是常说的“浮动布局”，也算阴差阳错开创了自己的一套布局。</li>
<li><strong>position:absolute</strong> 这个脱离文档流有些严重，过于清高，不跟普通小伙伴玩耍，我就不说什么了……</li>
<li><strong>overflow:hidden</strong> 这个超棒的哦！不像浮动和绝对定位，玩得有点过。也就是溢出剪裁什么的，本身还是个很普通的元素。因此，块状元素的流体特性保存相当完好，附上BFC的独立区域特性，可谓如虎添翼，宇宙无敌！哈无诶瓦(However), 就跟清除浮动：
<div class="zhxx_code">
<pre>.clearfix { overflow: hidden; _zoom: 1; }</pre>
</div>
<p>一样。由于很多场景我们是不能<code>overflow:hidden</code>的，因此，无法作为一个通用CSS类整站大规模使用。因此，<code>float+overflow</code>的自适应布局，我们可以在局部（你确定不会有什么被剪裁的情况下）很happy地使用。</p></li>
<li><strong>display:inline-block</strong> CSS届最伟大的声明之一，但是，在这里，就有些捉襟见肘了。<code>display:inline-block</code>会让元素尺寸包裹收缩，完全就不是我们想要的<code>block</code>水平的流动特性。唉，只能是一声叹气一枪毙掉的命！然而，峰回路转，世事难料。大家应该知道，IE6/IE7浏览器下，<code>block</code>水平的元素设置<code>display:inline-block</code>元素还是<code>block</code>水平，也就是还是会自适应容器的可用宽度显示。于是，我们就阴差阳错得到一个比<code>overflow:hidden</code>更牛逼的声明，即BFC特性加身，又流体特性保留。
<div class="zhxx_code">
<pre>.float-left {
    float: left;
}
.bfc-content {
    display: inline-block;
}</pre>
</div>
<p>当然，<code>*zoom: 1</code>也是类似效果，不过只适用于低级的IE浏览器，如IE7~</p></li>
<li><strong>display:table-cell</strong> 让元素表现得像单元格一样，IE8+以上浏览器才支持。跟<code>display:inline-block</code>一样，会跟随内部元素的宽度显示，看样子也是不合适的命。但是，单元格有个非常神奇的特性，就是你宽度值设置地再大，大到西伯利亚，实际宽度也不会超过表格容器的宽度。<br>
<img src="https://image.zhangxinxu.com/image/blog/201502/2015-02-12_224124.png" width="249" height="259" alt="表格单元格不会超出表格宽度特性" class="alignnone"><p></p>
<p>因此，如果我们把<code>display:table-cell</code>这个BFC元素宽度设置很大，比方说3000像素。那其实就跟<code>block</code>水平元素自动适应容器空间效果一模一样了。除非你的容器宽度超过3000像素，实际上，一般web页面不会有3000像素宽的模块的。所以，要是你实在不放心，设个<code>9999</code>像素值好了！</p>
<div class="zhxx_code">
<pre>.float-left {
    float: left;
}
.bfc-content {
    display: table-cell; width: 9999px;
}</pre>
</div>
<p>看上去，好像还不错。但是，还是有两点制约，一是IE8+以上浏览器兼容，有些苦逼的团队还要管IE6；二是应付连续英文字符换行有些吃力（可以嵌套<code>table-layout:fixed</code>解决）。但是，总体来看，适用的场景要比<code>overflow:hidden</code>广博很多。
</p></li>
<li><strong>display:table-row</strong> 对<code>width</code>无感，无法自适应剩余容器空间。</li>
<li><strong>display:table-caption</strong> 一无是处……还有其他声明也都是一无是处，我就不全部展开了……</li>
</ol>
<p><strong>总结：</strong>我们对BFC声明家族大致过了一遍，能担任自适应布局重任的也就是：</p>
<ol>
<li><span style="display:inline-block;width:200px;"><code>overflow:auto/hidden</code></span> IE7+</li>
<li><span style="display:inline-block;width:200px;"><code>display:inline-block</code></span>  IE6/IE7</li>
<li><span style="display:inline-block;width:200px;"><code>display:table-cell</code></span>   IE8+</li>
</ol>
<p>由于overflow有剪裁和出现滚动条等隐患，不适合作为整站通用类，于是，最后，类似清除浮动的通用类语句：</p>
<div class="zhxx_code">
<pre>.clearfix {
    *zoom: 1;
}
.clearfix:after {
    content: ''; display: table; clear: both;
}</pre>
</div>
<p>两栏或多栏自适应布局的通用类语句是（<code>block</code>水平标签，需配合浮动）：</p>
<div class="zhxx_code">
<pre>.cell {
    display: table-cell; width: 9999px;
    *display: inline-block; *width: auto;
}
</pre>
</div>
<p>这就是<a href="https://github.com/zhangxinxu/zxx.lib.css" target="_blank">zxx.lib.css</a>CSS样式库中<code>.cell</code>的由来！</p>
<p>当然，由于和浮动元素合作，清除浮动还是要的，于是，就有了<code>.fix</code> + <code>.l/.r</code> + <code>.cell</code>的无敌组合，可以多栏，也可以无限嵌套。</p>
<p>如果是局部，且确认安全；或有连续英文字符换行的隐患，你也可以使用<code>.fix</code> + <code>.l/.r</code> + <code>.ovh</code>的无敌组合，可以多栏，也可以无限嵌套。</p>
<h3>四、结束之言</h3>
<p>估计本文是春节前的最后一篇文章了，小生在这里提前祝大家「羊年快乐」「万事如意」「事业蒸蒸日上」！</p>
<p>另，本文内容非权威，多个人理解与感悟，仅供参考。欢迎交流，提出您的真知灼见！</p>
<p>感谢阅读！<img src="https://mat1.gtimg.com/www/mb/images/face/14.gif" align="absmiddle"></p>
<p class="link">本文为原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。<br>
本文地址：<a href="https://www.zhangxinxu.com/wordpress/?p=4588">https://www.zhangxinxu.com/wordpress/?p=4588</a></p>
<xtwq-q76></xtwq-q76><p>（本篇完）<span class="ins_txt">// 文章不错，我要<a href="javascript:" title="点击显示二维码" onclick="document.querySelector('.bds_weixin').click();_gaq.push(['_trackEvent', 'WX_SHARE', 'click', 'article']);">分享到微信</a>！有话要说？点击<a href="#comment" title="点击定位到评论" onclick="_gaq.push(['_trackEvent', 'WANT_COMM', 'click', 'article']);">这里</a>。</span></p>
<!-- Tag --></article>
                <div class="navigation">
                    <div class="alignleft">« <a href="https://www.zhangxinxu.com/wordpress/2015/02/image-local-blur-background-attachment-fixed/" rel="prev">图片动态局部毛玻璃模糊效果的实现</a></div>
                    <div class="alignright"><a href="https://www.zhangxinxu.com/wordpress/2015/02/ie-zoom-transform-filter/" rel="next">小tip: IE下zoom或Matrix矩阵滤镜中心点变换实现</a> »</div>
                </div>
				<div class="wp_share_box">
<div class="similarity" onclick="_gaq.push(['_trackEvent', 'MayLike', 'click', 'from bottom']);"><div class="similar_title">猜你喜欢</div><ul><li><a href="https://www.zhangxinxu.com/wordpress/2020/05/css-display-flow-root/">快速了解CSS display:flow-root声明</a> <span class="strength">(0.305)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2017/08/css-percent-padding-image-layout/">CSS百分比padding实现比例固定图片自适应布局</a> <span class="strength">(0.218)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2012/01/display-table-cell-display-table-layout-fixed-word-wrap-break-word/">display:table-cell自适应布局下连续单词字符换行</a> <span class="strength">(0.145)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2015/03/border-collapse-table-td-border-opacity/">border-collapse与table td边框opacity透明度诡异解析</a> <span class="strength">(0.145)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2010/10/%e6%88%91%e6%89%80%e7%9f%a5%e9%81%93%e7%9a%84%e5%87%a0%e7%a7%8ddisplaytable-cell%e7%9a%84%e5%ba%94%e7%94%a8/">我所知道的几种display:table-cell的应用</a> <span class="strength">(0.135)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify%e4%b8%8b%e5%88%97%e8%a1%a8%e7%9a%84%e4%b8%a4%e7%ab%af%e5%af%b9%e9%bd%90%e5%b8%83%e5%b1%80/">display:inline-block/text-align:justify下列表的两端对齐布局</a> <span class="strength">(0.135)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2010/07/css%e6%a0%b7%e5%bc%8f%e5%88%86%e7%a6%bb%e4%b9%8b%e5%86%8d%e5%88%86%e7%a6%bb/">CSS样式分离之再分离</a> <span class="strength">(0.126)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2009/08/%e5%a4%a7%e5%b0%8f%e4%b8%8d%e5%9b%ba%e5%ae%9a%e7%9a%84%e5%9b%be%e7%89%87%e3%80%81%e5%a4%9a%e8%a1%8c%e6%96%87%e5%ad%97%e7%9a%84%e6%b0%b4%e5%b9%b3%e5%9e%82%e7%9b%b4%e5%b1%85%e4%b8%ad/">大小不固定的图片、多行文字的水平垂直居中</a> <span class="strength">(0.118)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2010/01/%e5%af%b9overflow%e4%b8%8ezoom%e6%b8%85%e9%99%a4%e6%b5%ae%e5%8a%a8%e7%9a%84%e4%b8%80%e4%ba%9b%e8%ae%a4%e8%af%86/">对overflow与zoom"清除浮动"的一些认识</a> <span class="strength">(0.118)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2016/05/css3-width-max-contnet-min-content-fit-content/">理解CSS3 max/min-content及fit-content等width值</a> <span class="strength">(0.118)</span></li><li><a href="https://www.zhangxinxu.com/wordpress/2013/07/letter-spacing-first-letter-%e6%8c%89%e9%92%ae%e6%96%87%e5%ad%97%e9%9a%90%e8%97%8f/">letter-spacing+first-letter实现按钮文字隐藏</a> <span class="strength">(RANDOM - 0.031)</span></li></ul></div><div id="bdshare" class="bdsharebuttonbox share-fixed"><small class="alignleft" style="color:#777;margin-top:6px;">分享<span>到：</span></small><a href="//service.weibo.com/share/share.php?title=CSS深入理解流体特性和BFC特性下多栏自适应布局 «  张鑫旭-鑫空间-鑫生活&amp;url=https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/&amp;appkey=3740445153" id="shareWeibo" class="bds_tsina" title="分享到新浪微博" target="_blank"><svg class="icon-share-svg"><use xlink:href="#icon-weibo"></use></svg></a><a href="/php/qrcode/index.php?data=https://www.zhangxinxu.com/wordpress/2015/02/css-deep-understand-flow-bfc-column-two-auto-layout/&amp;size=20" id="shareWeixin" class="bds_weixin" title="分享到微信" target="_blank"><svg class="icon-share-svg"><use xlink:href="#icon-weixin"></use></svg></a></div>
        </div>
				<div class="postmetadata alt">
							<span class="post_tag">标签： <a href="https://www.zhangxinxu.com/wordpress/tag/bfc/" rel="tag">BFC</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/displayinline-block/" rel="tag">display:inline-block</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/displaytable-cell/" rel="tag">display:table-cell</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/inline-block/" rel="tag">inline-block</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/overflowhidden/" rel="tag">overflow:hidden</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/table-cell/" rel="tag">table-cell</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/%e5%b8%83%e5%b1%80/" rel="tag">布局</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/%e6%b5%81%e5%8a%a8%e6%80%a7%e5%b8%83%e5%b1%80/" rel="tag">流动性布局</a>, <a href="https://www.zhangxinxu.com/wordpress/tag/%e8%87%aa%e9%80%82%e5%ba%94%e5%b8%83%e5%b1%80/" rel="tag">自适应布局</a></span>		</div>				
	</div>
</div>