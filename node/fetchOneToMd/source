<article class="markdown-body entry-content container-lg" itemprop="text"><h2><a id="user-content-vnode" class="anchor" aria-hidden="true" href="#vnode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>VNode</h2>
<p>在刀耕火种的年代，我们需要在各个事件方法中直接操作DOM来达到修改视图的目的。但是当应用一大就会变得难以维护。</p>
<p>那我们是不是可以把真实DOM树抽象成一棵以JavaScript对象构成的抽象树，在修改抽象树数据后将抽象树转化成真实DOM重绘到页面上呢？于是虚拟DOM出现了，它是真实DOM的一层抽象，用属性描述真实DOM的各个特性。当它发生变化的时候，就会去修改视图。</p>
<p>可以想象，最简单粗暴的方法就是将整个DOM结构用innerHTML修改到页面上，但是这样进行重绘整个视图层是相当消耗性能的，我们是不是可以每次只更新它的修改呢？所以Vue.js将DOM抽象成一个以JavaScript对象为节点的虚拟DOM树，以VNode节点模拟真实DOM，可以对这颗抽象树进行创建节点、删除节点以及修改节点等操作，在这过程中都不需要操作真实DOM，只需要操作JavaScript对象后只对差异修改，相对于整块的innerHTML的粗暴式修改，大大提升了性能。修改以后经过diff算法得出一些需要修改的最小单位，再将这些小单位的视图进行更新。这样做减少了很多不需要的DOM操作，大大提高了性能。</p>
<p>Vue就使用了这样的抽象节点VNode，它是对真实DOM的一层抽象，而不依赖某个平台，它可以是浏览器平台，也可以是weex，甚至是node平台也可以对这样一棵抽象DOM树进行创建删除修改等操作，这也为前后端同构提供了可能。</p>
<p>具体VNode的细节可以看<a href="https://github.com/answershuto/learnVue/blob/master/docs/VNode%E8%8A%82%E7%82%B9.MarkDown">VNode节点</a>。</p>
<h2><a id="user-content-修改视图" class="anchor" aria-hidden="true" href="#修改视图"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>修改视图</h2>
<p>众所周知，Vue通过数据绑定来修改视图，当某个数据被修改的时候，set方法会让闭包中的Dep调用notify通知所有订阅者Watcher，Watcher通过get方法执行vm._update(vm._render(), hydrating)。</p>
<p>这里看一下_update方法</p>
<div class="highlight highlight-source-js"><pre><span class="pl-v">Vue</span><span class="pl-kos">.</span><span class="pl-c1">prototype</span><span class="pl-kos">.</span><span class="pl-en">_update</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">vnode</span>: <span class="pl-v">VNode</span><span class="pl-kos">,</span> <span class="pl-s1">hydrating</span>?: <span class="pl-s1">boolean</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">const</span> <span class="pl-s1">vm</span>: <span class="pl-v">Component</span> <span class="pl-c1">=</span> <span class="pl-smi">this</span>
    <span class="pl-c">/*如果已经该组件已经挂载过了则代表进入这个步骤是个更新的过程，触发beforeUpdate钩子*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">_isMounted</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-en">callHook</span><span class="pl-kos">(</span><span class="pl-s1">vm</span><span class="pl-kos">,</span> <span class="pl-s">'beforeUpdate'</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">const</span> <span class="pl-s1">prevEl</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span>
    <span class="pl-k">const</span> <span class="pl-s1">prevVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">_vnode</span>
    <span class="pl-k">const</span> <span class="pl-s1">prevActiveInstance</span> <span class="pl-c1">=</span> <span class="pl-s1">activeInstance</span>
    <span class="pl-s1">activeInstance</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span>
    <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">_vnode</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span>
    <span class="pl-c">// Vue.prototype.__patch__ is injected in entry points</span>
    <span class="pl-c">// based on the rendering backend used.</span>
    <span class="pl-c">/*基于后端渲染Vue.prototype.__patch__被用来作为一个入口*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span>!<span class="pl-s1">prevVnode</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">// initial render</span>
      <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-en">__patch__</span><span class="pl-kos">(</span>
        <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">hydrating</span><span class="pl-kos">,</span> <span class="pl-c1">false</span> <span class="pl-c">/* removeOnly */</span><span class="pl-kos">,</span>
        <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$options</span><span class="pl-kos">.</span><span class="pl-c1">_parentElm</span><span class="pl-kos">,</span>
        <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$options</span><span class="pl-kos">.</span><span class="pl-c1">_refElm</span>
      <span class="pl-kos">)</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
      <span class="pl-c">// updates</span>
      <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-en">__patch__</span><span class="pl-kos">(</span><span class="pl-s1">prevVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
    <span class="pl-s1">activeInstance</span> <span class="pl-c1">=</span> <span class="pl-s1">prevActiveInstance</span>
    <span class="pl-c">// update __vue__ reference</span>
    <span class="pl-c">/*更新新的实例对象的__vue__*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">prevEl</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">prevEl</span><span class="pl-kos">.</span><span class="pl-c1">__vue__</span> <span class="pl-c1">=</span> <span class="pl-c1">null</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span><span class="pl-kos">.</span><span class="pl-c1">__vue__</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span>
    <span class="pl-kos">}</span>
    <span class="pl-c">// if parent is an HOC, update its $el as well</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$vnode</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$parent</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$vnode</span> <span class="pl-c1">===</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$parent</span><span class="pl-kos">.</span><span class="pl-c1">_vnode</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$parent</span><span class="pl-kos">.</span><span class="pl-c1">$el</span> <span class="pl-c1">=</span> <span class="pl-s1">vm</span><span class="pl-kos">.</span><span class="pl-c1">$el</span>
    <span class="pl-kos">}</span>
    <span class="pl-c">// updated hook is called by the scheduler to ensure that children are</span>
    <span class="pl-c">// updated in a parent's updated hook.</span>
  <span class="pl-kos">}</span></pre></div>
<p><em>update方法的第一个参数是一个VNode对象，在内部会将该VNode对象与之前旧的VNode对象进行__patch</em>_。</p>
<p>什么是__patch__呢？</p>
<h2><a id="user-content-patch" class="anchor" aria-hidden="true" href="#patch"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><strong>patch</strong></h2>
<p>patch将新老VNode节点进行比对，然后将根据两者的比较结果进行最小单位地修改视图，而不是将整个视图根据新的VNode重绘。patch的核心在于diff算法，这套算法可以高效地比较virtual DOM的变更，得出变化以修改视图。</p>
<p>那么patch如何工作的呢？</p>
<p>首先说一下patch的核心diff算法，diff算法是通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间复杂度只有O(n)，是一种相当高效的算法。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/d6790d03ff6b16551613edf604d1f96dc9577a61/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32372f353961323363666361353066332e706e67"><img src="https://camo.githubusercontent.com/d6790d03ff6b16551613edf604d1f96dc9577a61/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32372f353961323363666361353066332e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/27/59a23cfca50f3.png" style="max-width:100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/db55af854af44f10b16053687c6c02d3d5ae4b98/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32372f353961323431396133633631372e706e67"><img src="https://camo.githubusercontent.com/db55af854af44f10b16053687c6c02d3d5ae4b98/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32372f353961323431396133633631372e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/27/59a2419a3c617.png" style="max-width:100%;"></a></p>
<p>这两张图代表旧的VNode与新VNode进行patch的过程，他们只是在同层级的VNode之间进行比较得到变化（第二张图中相同颜色的方块代表互相进行比较的VNode节点），然后修改变化的视图，所以十分高效。</p>
<p>让我们看一下patch的代码。</p>
<div class="highlight highlight-source-js"><pre>  <span class="pl-c">/*createPatchFunction的返回值，一个patch函数*/</span>
  <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-en">patch</span> <span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">hydrating</span><span class="pl-kos">,</span> <span class="pl-s1">removeOnly</span><span class="pl-kos">,</span> <span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">refElm</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">/*vnode不存在则直接调用销毁钩子*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-en">invokeDestroyHook</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">)</span>
      <span class="pl-k">return</span>
    <span class="pl-kos">}</span>

    <span class="pl-k">let</span> <span class="pl-s1">isInitialPatch</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span>
    <span class="pl-k">const</span> <span class="pl-s1">insertedVnodeQueue</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span>

    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">// empty mount (likely as component), create new root element</span>
      <span class="pl-c">/*oldVnode未定义的时候，其实也就是root节点，创建一个新的节点*/</span>
      <span class="pl-s1">isInitialPatch</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span>
      <span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">createElm</span></span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">refElm</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
      <span class="pl-c">/*标记旧的VNode是否有nodeType*/</span>
      <span class="pl-c">/*Github:https://github.com/answershuto*/</span>
      <span class="pl-k">const</span> <span class="pl-s1">isRealElement</span> <span class="pl-c1">=</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">nodeType</span><span class="pl-kos">)</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span>!<span class="pl-s1">isRealElement</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">sameVnode</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">// patch existing root node</span>
        <span class="pl-c">/*是同一个节点的时候直接修改现有的节点*/</span>
        <span class="pl-en">patchVnode</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">removeOnly</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">isRealElement</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">// mounting to a real element</span>
          <span class="pl-c">// check if this is server-rendered content and if we can perform</span>
          <span class="pl-c">// a successful hydration.</span>
          <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">nodeType</span> <span class="pl-c1">===</span> <span class="pl-c1">1</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-en">hasAttribute</span><span class="pl-kos">(</span><span class="pl-c1">SSR_ATTR</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-c">/*当旧的VNode是服务端渲染的元素，hydrating记为true*/</span>
            <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-en">removeAttribute</span><span class="pl-kos">(</span><span class="pl-c1">SSR_ATTR</span><span class="pl-kos">)</span>
            <span class="pl-s1">hydrating</span> <span class="pl-c1">=</span> <span class="pl-c1">true</span>
          <span class="pl-kos">}</span>
          <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isTrue</span><span class="pl-kos">(</span><span class="pl-s1">hydrating</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-c">/*需要合并到真实DOM上*/</span>
            <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">hydrate</span></span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
              <span class="pl-c">/*调用insert钩子*/</span>
              <span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">invokeInsertHook</span></span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-c1">true</span><span class="pl-kos">)</span>
              <span class="pl-k">return</span> <span class="pl-s1">oldVnode</span>
            <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">NODE_ENV</span> !== <span class="pl-s">'production'</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
              <span class="pl-en">warn</span><span class="pl-kos">(</span>
                <span class="pl-s">'The client-side rendered virtual DOM tree is not matching '</span> <span class="pl-c1">+</span>
                <span class="pl-s">'server-rendered content. This is likely caused by incorrect '</span> <span class="pl-c1">+</span>
                <span class="pl-s">'HTML markup, for example nesting block-level elements inside '</span> <span class="pl-c1">+</span>
                <span class="pl-s">'&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing '</span> <span class="pl-c1">+</span>
                <span class="pl-s">'full client-side render.'</span>
              <span class="pl-kos">)</span>
            <span class="pl-kos">}</span>
          <span class="pl-kos">}</span>
          <span class="pl-c">// either not server-rendered, or hydration failed.</span>
          <span class="pl-c">// create an empty node and replace it</span>
          <span class="pl-c">/*如果不是服务端渲染或者合并到真实DOM失败，则创建一个空的VNode节点替换它*/</span>
          <span class="pl-s1">oldVnode</span> <span class="pl-c1">=</span> <span class="pl-en">emptyNodeAt</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span>
        <span class="pl-c">// replacing existing element</span>
        <span class="pl-c">/*取代现有元素*/</span>
        <span class="pl-k">const</span> <span class="pl-s1">oldElm</span> <span class="pl-c1">=</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
        <span class="pl-k">const</span> <span class="pl-s1">parentElm</span> <span class="pl-c1">=</span> <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">parentNode</span><span class="pl-kos">(</span><span class="pl-s1">oldElm</span><span class="pl-kos">)</span>
        <span class="pl-en">createElm</span><span class="pl-kos">(</span>
          <span class="pl-s1">vnode</span><span class="pl-kos">,</span>
          <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span>
          <span class="pl-c">// extremely rare edge case: do not insert if old element is in a</span>
          <span class="pl-c">// leaving transition. Only happens when combining transition +</span>
          <span class="pl-c">// keep-alive + HOCs. (#4590)</span>
          <span class="pl-s1">oldElm</span><span class="pl-kos">.</span><span class="pl-c1">_leaveCb</span> ? <span class="pl-c1">null</span> : <span class="pl-s1">parentElm</span><span class="pl-kos">,</span>
          <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">nextSibling</span><span class="pl-kos">(</span><span class="pl-s1">oldElm</span><span class="pl-kos">)</span>
        <span class="pl-kos">)</span>

        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">parent</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">// component root element replaced.</span>
          <span class="pl-c">// update parent placeholder node element, recursively</span>
          <span class="pl-c">/*组件根节点被替换，遍历更新父节点element*/</span>
          <span class="pl-k">let</span> <span class="pl-s1">ancestor</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">parent</span>
          <span class="pl-k">while</span> <span class="pl-kos">(</span><span class="pl-s1">ancestor</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-s1">ancestor</span><span class="pl-kos">.</span><span class="pl-c1">elm</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
            <span class="pl-s1">ancestor</span> <span class="pl-c1">=</span> <span class="pl-s1">ancestor</span><span class="pl-kos">.</span><span class="pl-c1">parent</span>
          <span class="pl-kos">}</span>
          <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isPatchable</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-c">/*调用create回调*/</span>
            <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">cbs</span><span class="pl-kos">.</span><span class="pl-c1">create</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-c1">++</span><span class="pl-s1">i</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
              <span class="pl-s1">cbs</span><span class="pl-kos">.</span><span class="pl-c1">create</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">(</span><span class="pl-s1">emptyNode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">parent</span><span class="pl-kos">)</span>
            <span class="pl-kos">}</span>
          <span class="pl-kos">}</span>
        <span class="pl-kos">}</span>

        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">/*移除老节点*/</span>
          <span class="pl-en">removeVnodes</span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-kos">[</span><span class="pl-s1">oldVnode</span><span class="pl-kos">]</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">tag</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
          <span class="pl-c">/*Github:https://github.com/answershuto*/</span>
          <span class="pl-c">/*调用destroy钩子*/</span>
          <span class="pl-en">invokeDestroyHook</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">)</span>
        <span class="pl-kos">}</span>
      <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>

    <span class="pl-c">/*调用insert钩子*/</span>
    <span class="pl-en">invokeInsertHook</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">isInitialPatch</span><span class="pl-kos">)</span>
    <span class="pl-k">return</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
  <span class="pl-kos">}</span></pre></div>
<p>从代码中不难发现，当oldVnode与vnode在sameVnode的时候才会进行patchVnode，也就是新旧VNode节点判定为同一节点的时候才会进行patchVnode这个过程，否则就是创建新的DOM，移除旧的DOM。</p>
<p>怎么样的节点算sameVnode呢？</p>
<h2><a id="user-content-samevnode" class="anchor" aria-hidden="true" href="#samevnode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>sameVnode</h2>
<p>我们来看一下sameVnode的实现。</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c">/*</span>
<span class="pl-c">  判断两个VNode节点是否是同一个节点，需要满足以下条件</span>
<span class="pl-c">  key相同</span>
<span class="pl-c">  tag（当前节点的标签名）相同</span>
<span class="pl-c">  isComment（是否为注释节点）相同</span>
<span class="pl-c">  是否data（当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息）都有定义</span>
<span class="pl-c">  当标签是&lt;input&gt;的时候，type必须相同</span>
<span class="pl-c">*/</span>
<span class="pl-k">function</span> <span class="pl-en">sameVnode</span> <span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">,</span> <span class="pl-s1">b</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">return</span> <span class="pl-kos">(</span>
    <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">key</span> <span class="pl-c1">===</span> <span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">key</span> <span class="pl-c1">&amp;&amp;</span>
    <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">tag</span> <span class="pl-c1">===</span> <span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">tag</span> <span class="pl-c1">&amp;&amp;</span>
    <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">isComment</span> <span class="pl-c1">===</span> <span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">isComment</span> <span class="pl-c1">&amp;&amp;</span>
    <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">)</span> <span class="pl-c1">===</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span>
    <span class="pl-en">sameInputType</span><span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">,</span> <span class="pl-s1">b</span><span class="pl-kos">)</span>
  <span class="pl-kos">)</span>
<span class="pl-kos">}</span>

<span class="pl-c">// Some browsers do not support dynamically changing type for &lt;input&gt;</span>
<span class="pl-c">// so they need to be treated as different nodes</span>
<span class="pl-c">/*</span>
<span class="pl-c">  判断当标签是&lt;input&gt;的时候，type是否相同</span>
<span class="pl-c">  某些浏览器不支持动态修改&lt;input&gt;类型，所以他们被视为不同节点</span>
<span class="pl-c">*/</span>
<span class="pl-k">function</span> <span class="pl-en">sameInputType</span> <span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">,</span> <span class="pl-s1">b</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">tag</span> !== <span class="pl-s">'input'</span><span class="pl-kos">)</span> <span class="pl-k">return</span> <span class="pl-c1">true</span>
  <span class="pl-k">let</span> <span class="pl-s1">i</span>
  <span class="pl-k">const</span> <span class="pl-s1">typeA</span> <span class="pl-c1">=</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">a</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">type</span>
  <span class="pl-k">const</span> <span class="pl-s1">typeB</span> <span class="pl-c1">=</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">b</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">type</span>
  <span class="pl-k">return</span> <span class="pl-s1">typeA</span> <span class="pl-c1">===</span> <span class="pl-s1">typeB</span>
<span class="pl-kos">}</span></pre></div>
<p>当两个VNode的tag、key、isComment都相同，并且同时定义或未定义data的时候，且如果标签为input则type必须相同。这时候这两个VNode则算sameVnode，可以直接进行patchVnode操作。</p>
<h2><a id="user-content-patchvnode" class="anchor" aria-hidden="true" href="#patchvnode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>patchVnode</h2>
<p>还是先来看一下patchVnode的代码。</p>
<div class="highlight highlight-source-js"><pre>  <span class="pl-c">/*patch VNode节点*/</span>
  <span class="pl-k">function</span> <span class="pl-en">patchVnode</span> <span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">removeOnly</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">/*两个VNode节点相同则直接返回*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">oldVnode</span> <span class="pl-c1">===</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">return</span>
    <span class="pl-kos">}</span>
    <span class="pl-c">// reuse element for static trees.</span>
    <span class="pl-c">// note we only do this if the vnode is cloned -</span>
    <span class="pl-c">// if the new node is not cloned it means the render functions have been</span>
    <span class="pl-c">// reset by the hot-reload-api and we need to do a proper re-render.</span>
    <span class="pl-c">/*</span>
<span class="pl-c">      如果新旧VNode都是静态的，同时它们的key相同（代表同一节点），</span>
<span class="pl-c">      并且新的VNode是clone或者是标记了once（标记v-once属性，只渲染一次），</span>
<span class="pl-c">      那么只需要替换elm以及componentInstance即可。</span>
<span class="pl-c">    */</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isTrue</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">isStatic</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span>
        <span class="pl-en">isTrue</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">isStatic</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span>
        <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">key</span> <span class="pl-c1">===</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">key</span> <span class="pl-c1">&amp;&amp;</span>
        <span class="pl-kos">(</span><span class="pl-en">isTrue</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">isCloned</span><span class="pl-kos">)</span> <span class="pl-c1">||</span> <span class="pl-en">isTrue</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">isOnce</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span> <span class="pl-c1">=</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
      <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">componentInstance</span> <span class="pl-c1">=</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">componentInstance</span>
      <span class="pl-k">return</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">let</span> <span class="pl-s1">i</span>
    <span class="pl-k">const</span> <span class="pl-s1">data</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">data</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">data</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">data</span><span class="pl-kos">.</span><span class="pl-c1">hook</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">prepatch</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">/*i = data.hook.prepatch，如果存在的话，见"./create-component componentVNodeHooks"。*/</span>
      <span class="pl-s1">i</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">const</span> <span class="pl-s1">elm</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span> <span class="pl-c1">=</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
    <span class="pl-k">const</span> <span class="pl-s1">oldCh</span> <span class="pl-c1">=</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">children</span>
    <span class="pl-k">const</span> <span class="pl-s1">ch</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">children</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">data</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isPatchable</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">/*调用update回调以及update钩子*/</span>
      <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">cbs</span><span class="pl-kos">.</span><span class="pl-c1">update</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-c1">++</span><span class="pl-s1">i</span><span class="pl-kos">)</span> <span class="pl-s1">cbs</span><span class="pl-kos">.</span><span class="pl-c1">update</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">data</span><span class="pl-kos">.</span><span class="pl-c1">hook</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">update</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-s1">i</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
    <span class="pl-c">/*如果这个VNode节点没有text文本时*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">text</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldCh</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">ch</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">/*新老节点均有children子节点，则对子节点进行diff操作，调用updateChildren*/</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">oldCh</span> !== <span class="pl-s1">ch</span><span class="pl-kos">)</span> <span class="pl-en">updateChildren</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">oldCh</span><span class="pl-kos">,</span> <span class="pl-s1">ch</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">removeOnly</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">ch</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">/*如果老节点没有子节点而新节点存在子节点，先清空elm的文本内容，然后为当前节点加入子节点*/</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">text</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">setTextContent</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s">''</span><span class="pl-kos">)</span>
        <span class="pl-en">addVnodes</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-c1">null</span><span class="pl-kos">,</span> <span class="pl-s1">ch</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">,</span> <span class="pl-s1">ch</span><span class="pl-kos">.</span><span class="pl-c1">length</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldCh</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">/*当新节点没有子节点而老节点有子节点的时候，则移除所有ele的子节点*/</span>
        <span class="pl-en">removeVnodes</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">oldCh</span><span class="pl-kos">,</span> <span class="pl-c1">0</span><span class="pl-kos">,</span> <span class="pl-s1">oldCh</span><span class="pl-kos">.</span><span class="pl-c1">length</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">text</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">/*当新老节点都无子节点的时候，只是文本的替换，因为这个逻辑中新节点text不存在，所以直接去除ele的文本*/</span>
        <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">setTextContent</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s">''</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">text</span> !== <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">text</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">/*当新老节点text不一样时，直接替换这段文本*/</span>
      <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">setTextContent</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">text</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
    <span class="pl-c">/*调用postpatch钩子*/</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">data</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">data</span><span class="pl-kos">.</span><span class="pl-c1">hook</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-s1">i</span><span class="pl-kos">.</span><span class="pl-c1">postpatch</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-s1">i</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span></pre></div>
<p>patchVnode的规则是这样的：</p>
<p>1.如果新旧VNode都是静态的，同时它们的key相同（代表同一节点），并且新的VNode是clone或者是标记了once（标记v-once属性，只渲染一次），那么只需要替换elm以及componentInstance即可。</p>
<p>2.新老节点均有children子节点，则对子节点进行diff操作，调用updateChildren，这个updateChildren也是diff的核心。</p>
<p>3.如果老节点没有子节点而新节点存在子节点，先清空老节点DOM的文本内容，然后为当前DOM节点加入子节点。</p>
<p>4.当新节点没有子节点而老节点有子节点的时候，则移除该DOM节点的所有子节点。</p>
<p>5.当新老节点都无子节点的时候，只是文本的替换。</p>
<h2><a id="user-content-updatechildren" class="anchor" aria-hidden="true" href="#updatechildren"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>updateChildren</h2>
<div class="highlight highlight-source-js"><pre>  <span class="pl-k">function</span> <span class="pl-en">updateChildren</span> <span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">oldCh</span><span class="pl-kos">,</span> <span class="pl-s1">newCh</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">removeOnly</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">let</span> <span class="pl-s1">oldStartIdx</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">let</span> <span class="pl-s1">newStartIdx</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span>
    <span class="pl-k">let</span> <span class="pl-s1">oldEndIdx</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">.</span><span class="pl-c1">length</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>
    <span class="pl-k">let</span> <span class="pl-s1">oldStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span>
    <span class="pl-k">let</span> <span class="pl-s1">oldEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-s1">oldEndIdx</span><span class="pl-kos">]</span>
    <span class="pl-k">let</span> <span class="pl-s1">newEndIdx</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">.</span><span class="pl-c1">length</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>
    <span class="pl-k">let</span> <span class="pl-s1">newStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">0</span><span class="pl-kos">]</span>
    <span class="pl-k">let</span> <span class="pl-s1">newEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-s1">newEndIdx</span><span class="pl-kos">]</span>
    <span class="pl-k">let</span> <span class="pl-s1">oldKeyToIdx</span><span class="pl-kos">,</span> <span class="pl-s1">idxInOld</span><span class="pl-kos">,</span> <span class="pl-s1">elmToMove</span><span class="pl-kos">,</span> <span class="pl-s1">refElm</span>

    <span class="pl-c">// removeOnly is a special flag used only by &lt;transition-group&gt;</span>
    <span class="pl-c">// to ensure removed elements stay in correct relative positions</span>
    <span class="pl-c">// during leaving transitions</span>
    <span class="pl-k">const</span> <span class="pl-s1">canMove</span> <span class="pl-c1">=</span> !<span class="pl-s1">removeOnly</span>

    <span class="pl-k">while</span> <span class="pl-kos">(</span><span class="pl-s1">oldStartIdx</span> &lt;= <span class="pl-s1">oldEndIdx</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">newStartIdx</span> &lt;= <span class="pl-s1">newEndIdx</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">oldStartVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-s1">oldStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">oldStartIdx</span><span class="pl-kos">]</span> <span class="pl-c">// Vnode has been moved left</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">oldEndVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-s1">oldEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">--</span><span class="pl-s1">oldEndIdx</span><span class="pl-kos">]</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">sameVnode</span></span><span class="pl-kos">(</span><span class="pl-s1">oldStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-c">/*前四种情况其实是指定key的时候，判定为同一个VNode，则直接patchVnode即可，分别比较oldCh以及newCh的两头节点2*2=4种情况*/</span>
        <span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">patchVnode</span></span><span class="pl-kos">(</span><span class="pl-s1">oldStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
        <span class="pl-s1">oldStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">oldStartIdx</span><span class="pl-kos">]</span>
        <span class="pl-s1">newStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">newStartIdx</span><span class="pl-kos">]</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">sameVnode</span><span class="pl-kos">(</span><span class="pl-s1">oldEndVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newEndVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">patchVnode</span></span><span class="pl-kos">(</span><span class="pl-s1">oldEndVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newEndVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
        <span class="pl-s1">oldEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">--</span><span class="pl-s1">oldEndIdx</span><span class="pl-kos">]</span>
        <span class="pl-s1">newEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">--</span><span class="pl-s1">newEndIdx</span><span class="pl-kos">]</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">sameVnode</span><span class="pl-kos">(</span><span class="pl-s1">oldStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newEndVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span> <span class="pl-c">// Vnode moved right</span>
        <span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">patchVnode</span></span><span class="pl-kos">(</span><span class="pl-s1">oldStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newEndVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
        <span class="pl-s1">canMove</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">insertBefore</span></span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">nextSibling</span></span><span class="pl-kos">(</span><span class="pl-s1">oldEndVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
        <span class="pl-s1">oldStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">oldStartIdx</span><span class="pl-kos">]</span>
        <span class="pl-s1">newEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">--</span><span class="pl-s1">newEndIdx</span><span class="pl-kos">]</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">sameVnode</span></span><span class="pl-kos">(</span><span class="pl-s1">oldEndVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span> <span class="pl-c">// Vnode moved left</span>
        <span class="pl-en">patchVnode</span><span class="pl-kos">(</span><span class="pl-s1">oldEndVnode</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
        <span class="pl-s1">canMove</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">insertBefore</span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">oldEndVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">)</span>
        <span class="pl-s1">oldEndVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-c1">--</span><span class="pl-s1">oldEndIdx</span><span class="pl-kos">]</span>
        <span class="pl-s1">newStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">newStartIdx</span><span class="pl-kos">]</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
        <span class="pl-c">/*</span>
<span class="pl-c">          生成一个key与旧VNode的key对应的哈希表（只有第一次进来undefined的时候会生成，也为后面检测重复的key值做铺垫）</span>
<span class="pl-c">          比如childre是这样的 [{xx: xx, key: 'key0'}, {xx: xx, key: 'key1'}, {xx: xx, key: 'key2'}]  beginIdx = 0   endIdx = 2  </span>
<span class="pl-c">          结果生成{key0: 0, key1: 1, key2: 2}</span>
<span class="pl-c">        */</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">oldKeyToIdx</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-s1">oldKeyToIdx</span> <span class="pl-c1">=</span> <span class="pl-en"><span class="pl-token" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:89577951,&quot;ref&quot;:&quot;master&quot;,&quot;language&quot;:&quot;Markdown&quot;,&quot;originating_url&quot;:&quot;https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown&quot;,&quot;user_id&quot;:23213046}}" data-hydro-click-hmac="65b642ee098255db9b3e9eddb097a3ba0291b1a9243b675ddd43d64a3dd6aaf4">createKeyToOldIdx</span></span><span class="pl-kos">(</span><span class="pl-s1">oldCh</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartIdx</span><span class="pl-kos">,</span> <span class="pl-s1">oldEndIdx</span><span class="pl-kos">)</span>
        <span class="pl-c">/*如果newStartVnode新的VNode节点存在key并且这个key在oldVnode中能找到则返回这个节点的idxInOld（即第几个节点，下标）*/</span>
        <span class="pl-s1">idxInOld</span> <span class="pl-c1">=</span> <span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">newStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">key</span><span class="pl-kos">)</span> ? <span class="pl-s1">oldKeyToIdx</span><span class="pl-kos">[</span><span class="pl-s1">newStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">key</span><span class="pl-kos">]</span> : <span class="pl-c1">null</span>
        <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">idxInOld</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span> <span class="pl-c">// New element</span>
          <span class="pl-c">/*newStartVnode没有key或者是该key没有在老节点中找到则创建一个新的节点*/</span>
          <span class="pl-en">createElm</span><span class="pl-kos">(</span><span class="pl-s1">newStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">)</span>
          <span class="pl-s1">newStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">newStartIdx</span><span class="pl-kos">]</span>
        <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
          <span class="pl-c">/*获取同key的老节点*/</span>
          <span class="pl-s1">elmToMove</span> <span class="pl-c1">=</span> <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-s1">idxInOld</span><span class="pl-kos">]</span>
          <span class="pl-c">/* istanbul ignore if */</span>
          <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">process</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">.</span><span class="pl-c1">NODE_ENV</span> !== <span class="pl-s">'production'</span> <span class="pl-c1">&amp;&amp;</span> !<span class="pl-s1">elmToMove</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-c">/*如果elmToMove不存在说明之前已经有新节点放入过这个key的DOM中，提示可能存在重复的key，确保v-for的时候item有唯一的key值*/</span>
            <span class="pl-en">warn</span><span class="pl-kos">(</span>
              <span class="pl-s">'It seems there are duplicate keys that is causing an update error. '</span> <span class="pl-c1">+</span>
              <span class="pl-s">'Make sure each v-for item has a unique key.'</span>
            <span class="pl-kos">)</span>
          <span class="pl-kos">}</span>
          <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">sameVnode</span><span class="pl-kos">(</span><span class="pl-s1">elmToMove</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
            <span class="pl-c">/*Github:https://github.com/answershuto*/</span>
            <span class="pl-c">/*如果新VNode与得到的有相同key的节点是同一个VNode则进行patchVnode*/</span>
            <span class="pl-en">patchVnode</span><span class="pl-kos">(</span><span class="pl-s1">elmToMove</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
            <span class="pl-c">/*因为已经patchVnode进去了，所以将这个老节点赋值undefined，之后如果还有新节点与该节点key相同可以检测出来提示已有重复的key*/</span>
            <span class="pl-s1">oldCh</span><span class="pl-kos">[</span><span class="pl-s1">idxInOld</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">undefined</span>
            <span class="pl-c">/*当有标识位canMove实可以直接插入oldStartVnode对应的真实DOM节点前面*/</span>
            <span class="pl-s1">canMove</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">nodeOps</span><span class="pl-kos">.</span><span class="pl-en">insertBefore</span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">newStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">)</span>
            <span class="pl-s1">newStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">newStartIdx</span><span class="pl-kos">]</span>
          <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
            <span class="pl-c">// same key but different element. treat as new element</span>
            <span class="pl-c">/*当新的VNode与找到的同样key的VNode不是sameVNode的时候（比如说tag不一样或者是有不一样type的input标签），创建一个新的节点*/</span>
            <span class="pl-en">createElm</span><span class="pl-kos">(</span><span class="pl-s1">newStartVnode</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">,</span> <span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartVnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span><span class="pl-kos">)</span>
            <span class="pl-s1">newStartVnode</span> <span class="pl-c1">=</span> <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-c1">++</span><span class="pl-s1">newStartIdx</span><span class="pl-kos">]</span>
          <span class="pl-kos">}</span>
        <span class="pl-kos">}</span>
      <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">oldStartIdx</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">oldEndIdx</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">/*全部比较完成以后，发现oldStartIdx &gt; oldEndIdx的话，说明老节点已经遍历完了，新节点比老节点多，所以这时候多出来的新节点需要一个一个创建出来加入到真实DOM中*/</span>
      <span class="pl-s1">refElm</span> <span class="pl-c1">=</span> <span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-s1">newEndIdx</span> <span class="pl-c1">+</span> <span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">)</span> ? <span class="pl-c1">null</span> : <span class="pl-s1">newCh</span><span class="pl-kos">[</span><span class="pl-s1">newEndIdx</span> <span class="pl-c1">+</span> <span class="pl-c1">1</span><span class="pl-kos">]</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
      <span class="pl-en">addVnodes</span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">refElm</span><span class="pl-kos">,</span> <span class="pl-s1">newCh</span><span class="pl-kos">,</span> <span class="pl-s1">newStartIdx</span><span class="pl-kos">,</span> <span class="pl-s1">newEndIdx</span><span class="pl-kos">,</span> <span class="pl-s1">insertedVnodeQueue</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">newStartIdx</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">newEndIdx</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-c">/*如果全部比较完成以后发现newStartIdx &gt; newEndIdx，则说明新节点已经遍历完了，老节点多余新节点，这个时候需要将多余的老节点从真实DOM中移除*/</span>
      <span class="pl-en">removeVnodes</span><span class="pl-kos">(</span><span class="pl-s1">parentElm</span><span class="pl-kos">,</span> <span class="pl-s1">oldCh</span><span class="pl-kos">,</span> <span class="pl-s1">oldStartIdx</span><span class="pl-kos">,</span> <span class="pl-s1">oldEndIdx</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span></pre></div>
<p>直接看源码可能比较难以捋清其中的关系，我们通过图来看一下。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/1a740887f89d1ad19d92762a64b79671fd06c5f3/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32382f353961343031356262323736352e706e67"><img src="https://camo.githubusercontent.com/1a740887f89d1ad19d92762a64b79671fd06c5f3/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32382f353961343031356262323736352e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/28/59a4015bb2765.png" style="max-width:100%;"></a></p>
<p>首先，在新老两个VNode节点的左右头尾两侧都有一个变量标记，在遍历过程中这几个变量都会向中间靠拢。当oldStartIdx &gt; oldEndIdx或者newStartIdx &gt; newEndIdx时结束循环。</p>
<p>索引与VNode节点的对应关系：
oldStartIdx =&gt; oldStartVnode
oldEndIdx =&gt; oldEndVnode
newStartIdx =&gt; newStartVnode
newEndIdx =&gt; newEndVnode</p>
<p>在遍历中，如果存在key，并且满足sameVnode，会将该DOM节点进行复用，否则则会创建一个新的DOM节点。</p>
<p>首先，oldStartVnode、oldEndVnode与newStartVnode、newEndVnode两两比较一共有2*2=4种比较方法。</p>
<p>当新老VNode节点的start或者end满足sameVnode时，也就是sameVnode(oldStartVnode, newStartVnode)或者sameVnode(oldEndVnode, newEndVnode)，直接将该VNode节点进行patchVnode即可。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/019c92655ee462692af0013a1ebbcf0f76d2ba1f/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32382f353961343063313263313635352e706e67"><img src="https://camo.githubusercontent.com/019c92655ee462692af0013a1ebbcf0f76d2ba1f/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32382f353961343063313263313635352e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/28/59a40c12c1655.png" style="max-width:100%;"></a></p>
<p>如果oldStartVnode与newEndVnode满足sameVnode，即sameVnode(oldStartVnode, newEndVnode)。</p>
<p>这时候说明oldStartVnode已经跑到了oldEndVnode后面去了，进行patchVnode的同时还需要将真实DOM节点移动到oldEndVnode的后面。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0969996b7998a30ea4f21470a090e0bd4a5bd080/68747470733a2f2f6f6f6f2e306f302e6f6f6f2f323031372f30382f32382f353961343231343738343937392e706e67"><img src="https://camo.githubusercontent.com/0969996b7998a30ea4f21470a090e0bd4a5bd080/68747470733a2f2f6f6f6f2e306f302e6f6f6f2f323031372f30382f32382f353961343231343738343937392e706e67" alt="img" data-canonical-src="https://ooo.0o0.ooo/2017/08/28/59a4214784979.png" style="max-width:100%;"></a></p>
<p>如果oldEndVnode与newStartVnode满足sameVnode，即sameVnode(oldEndVnode, newStartVnode)。</p>
<p>这说明oldEndVnode跑到了oldStartVnode的前面，进行patchVnode的同时真实的DOM节点移动到了oldStartVnode的前面。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/dd5c4be285dec169fe458b8e0219f307a7b11d64/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346337303638356431322e706e67"><img src="https://camo.githubusercontent.com/dd5c4be285dec169fe458b8e0219f307a7b11d64/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346337303638356431322e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/29/59a4c70685d12.png" style="max-width:100%;"></a></p>
<p>如果以上情况均不符合，则通过createKeyToOldIdx会得到一个oldKeyToIdx，里面存放了一个key为旧的VNode，value为对应index序列的哈希表。从这个哈希表中可以找到是否有与newStartVnode一致key的旧的VNode节点，如果同时满足sameVnode，patchVnode的同时会将这个真实DOM（elmToMove）移动到oldStartVnode对应的真实DOM的前面。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/0d7072c5a5b674d757c35b8f00b7562d6bba292b/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346437353532643239392e706e67"><img src="https://camo.githubusercontent.com/0d7072c5a5b674d757c35b8f00b7562d6bba292b/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346437353532643239392e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/29/59a4d7552d299.png" style="max-width:100%;"></a></p>
<p>当然也有可能newStartVnode在旧的VNode节点找不到一致的key，或者是即便key相同却不是sameVnode，这个时候会调用createElm创建一个新的DOM节点。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/f27a4dc6febc556732a351f8fba65895479a28ac/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346465306661346462612e706e67"><img src="https://camo.githubusercontent.com/f27a4dc6febc556732a351f8fba65895479a28ac/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346465306661346462612e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/29/59a4de0fa4dba.png" style="max-width:100%;"></a></p>
<p>到这里循环已经结束了，那么剩下我们还需要处理多余或者不够的真实DOM节点。</p>
<p>1.当结束时oldStartIdx &gt; oldEndIdx，这个时候老的VNode节点已经遍历完了，但是新的节点还没有。说明了新的VNode节点实际上比老的VNode节点多，也就是比真实DOM多，需要将剩下的（也就是新增的）VNode节点插入到真实DOM节点中去，此时调用addVnodes（批量调用createElm的接口将这些节点加入到真实DOM中去）。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/de70d7fd6e556d54cc42478e178a1aa5954533ec/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961353039663064313738382e706e67"><img src="https://camo.githubusercontent.com/de70d7fd6e556d54cc42478e178a1aa5954533ec/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961353039663064313738382e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/29/59a509f0d1788.png" style="max-width:100%;"></a></p>
<p>2。同理，当newStartIdx &gt; newEndIdx时，新的VNode节点已经遍历完了，但是老的节点还有剩余，说明真实DOM节点多余了，需要从文档中删除，这时候调用removeVnodes将这些多余的真实DOM删除。</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/33ec0996ad25502c26b06bf6e77c529bbd0bfb1e/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346633383962393863622e706e67"><img src="https://camo.githubusercontent.com/33ec0996ad25502c26b06bf6e77c529bbd0bfb1e/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30382f32392f353961346633383962393863622e706e67" alt="img" data-canonical-src="https://i.loli.net/2017/08/29/59a4f389b98cb.png" style="max-width:100%;"></a></p>
<h2><a id="user-content-dom操作" class="anchor" aria-hidden="true" href="#dom操作"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>DOM操作</h2>
<p>由于Vue使用了虚拟DOM，所以虚拟DOM可以在任何支持JavaScript语言的平台上操作，譬如说目前Vue支持的浏览器平台或是weex，在虚拟DOM的实现上是一致的。那么最后虚拟DOM如何映射到真实的DOM节点上呢？</p>
<p>Vue为平台做了一层适配层，浏览器平台见<a href="https://github.com/answershuto/learnVue/blob/master/vue-src/platforms/web/runtime/node-ops.js">/platforms/web/runtime/node-ops.js</a>以及weex平台见<a href="https://github.com/answershuto/learnVue/blob/master/vue-src/platforms/weex/runtime/node-ops.js">/platforms/weex/runtime/node-ops.js</a>。不同平台之间通过适配层对外提供相同的接口，虚拟DOM进行操作真实DOM节点的时候，只需要调用这些适配层的接口即可，而内部实现则不需要关心，它会根据平台的改变而改变。</p>
<p>现在又出现了一个问题，我们只是将虚拟DOM映射成了真实的DOM。那如何给这些DOM加入attr、class、style等DOM属性呢？</p>
<p>这要依赖于虚拟DOM的生命钩子。虚拟DOM提供了如下的钩子函数，分别在不同的时期会进行调用。</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-s1">hooks</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-s">'create'</span><span class="pl-kos">,</span> <span class="pl-s">'activate'</span><span class="pl-kos">,</span> <span class="pl-s">'update'</span><span class="pl-kos">,</span> <span class="pl-s">'remove'</span><span class="pl-kos">,</span> <span class="pl-s">'destroy'</span><span class="pl-kos">]</span>

<span class="pl-c">/*构建cbs回调函数，web平台上见/platforms/web/runtime/modules*/</span>
  <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">hooks</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-c1">++</span><span class="pl-s1">i</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">cbs</span><span class="pl-kos">[</span><span class="pl-s1">hooks</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-kos">[</span><span class="pl-kos">]</span>
    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-s1">j</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">j</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">modules</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-c1">++</span><span class="pl-s1">j</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">modules</span><span class="pl-kos">[</span><span class="pl-s1">j</span><span class="pl-kos">]</span><span class="pl-kos">[</span><span class="pl-s1">hooks</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">]</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-s1">cbs</span><span class="pl-kos">[</span><span class="pl-s1">hooks</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">]</span><span class="pl-kos">.</span><span class="pl-en">push</span><span class="pl-kos">(</span><span class="pl-s1">modules</span><span class="pl-kos">[</span><span class="pl-s1">j</span><span class="pl-kos">]</span><span class="pl-kos">[</span><span class="pl-s1">hooks</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">]</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span></pre></div>
<p>同理，也会根据不同平台有自己不同的实现，我们这里以Web平台为例。Web平台的钩子函数见<a href="https://github.com/answershuto/learnVue/tree/master/vue-src/platforms/web/runtime/modules">/platforms/web/runtime/modules</a>。里面有对attr、class、props、events、style以及transition（过渡状态）的DOM属性进行操作。</p>
<p>以attr为例，代码很简单。</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c">/* <span class="pl-k">@flow</span> */</span>

<span class="pl-k">import</span> <span class="pl-kos">{</span> <span class="pl-s1">isIE9</span> <span class="pl-kos">}</span> <span class="pl-k">from</span> <span class="pl-s">'core/util/env'</span>

<span class="pl-k">import</span> <span class="pl-kos">{</span>
  <span class="pl-s1">extend</span><span class="pl-kos">,</span>
  <span class="pl-s1">isDef</span><span class="pl-kos">,</span>
  <span class="pl-s1">isUndef</span>
<span class="pl-kos">}</span> <span class="pl-k">from</span> <span class="pl-s">'shared/util'</span>

<span class="pl-k">import</span> <span class="pl-kos">{</span>
  <span class="pl-s1">isXlink</span><span class="pl-kos">,</span>
  <span class="pl-s1">xlinkNS</span><span class="pl-kos">,</span>
  <span class="pl-s1">getXlinkProp</span><span class="pl-kos">,</span>
  <span class="pl-s1">isBooleanAttr</span><span class="pl-kos">,</span>
  <span class="pl-s1">isEnumeratedAttr</span><span class="pl-kos">,</span>
  <span class="pl-s1">isFalsyAttrValue</span>
<span class="pl-kos">}</span> <span class="pl-k">from</span> <span class="pl-s">'web/util/index'</span>

<span class="pl-c">/*更新attr*/</span>
<span class="pl-k">function</span> <span class="pl-en">updateAttrs</span> <span class="pl-kos">(</span><span class="pl-s1">oldVnode</span>: <span class="pl-v">VNodeWithData</span><span class="pl-kos">,</span> <span class="pl-s1">vnode</span>: <span class="pl-v">VNodeWithData</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-c">/*如果旧的以及新的VNode节点均没有attr属性，则直接返回*/</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span><span class="pl-kos">)</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">return</span>
  <span class="pl-kos">}</span>
  <span class="pl-k">let</span> <span class="pl-s1">key</span><span class="pl-kos">,</span> <span class="pl-s1">cur</span><span class="pl-kos">,</span> <span class="pl-s1">old</span>
  <span class="pl-c">/*VNode节点对应的Dom实例*/</span>
  <span class="pl-k">const</span> <span class="pl-s1">elm</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">elm</span>
  <span class="pl-c">/*旧VNode节点的attr*/</span>
  <span class="pl-k">const</span> <span class="pl-s1">oldAttrs</span> <span class="pl-c1">=</span> <span class="pl-s1">oldVnode</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span> <span class="pl-c1">||</span> <span class="pl-kos">{</span><span class="pl-kos">}</span>
  <span class="pl-c">/*新VNode节点的attr*/</span>
  <span class="pl-k">let</span> <span class="pl-s1">attrs</span>: <span class="pl-s1">any</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span> <span class="pl-c1">||</span> <span class="pl-kos">{</span><span class="pl-kos">}</span>
  <span class="pl-c">// clone observed objects, as the user probably wants to mutate it</span>
  <span class="pl-c">/*如果新的VNode的attr已经有__ob__（代表已经被Observe处理过了）， 进行深拷贝*/</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isDef</span><span class="pl-kos">(</span><span class="pl-s1">attrs</span><span class="pl-kos">.</span><span class="pl-c1">__ob__</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">attrs</span> <span class="pl-c1">=</span> <span class="pl-s1">vnode</span><span class="pl-kos">.</span><span class="pl-c1">data</span><span class="pl-kos">.</span><span class="pl-c1">attrs</span> <span class="pl-c1">=</span> <span class="pl-en">extend</span><span class="pl-kos">(</span><span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">,</span> <span class="pl-s1">attrs</span><span class="pl-kos">)</span>
  <span class="pl-kos">}</span>

  <span class="pl-c">/*遍历attr，不一致则替换*/</span>
  <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">attrs</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">cur</span> <span class="pl-c1">=</span> <span class="pl-s1">attrs</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span>
    <span class="pl-s1">old</span> <span class="pl-c1">=</span> <span class="pl-s1">oldAttrs</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">old</span> !== <span class="pl-s1">cur</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-en">setAttr</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s1">key</span><span class="pl-kos">,</span> <span class="pl-s1">cur</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span>
  <span class="pl-c">// #4391: in IE9, setting type can reset value for input[type=radio]</span>
  <span class="pl-c">/* istanbul ignore if */</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">isIE9</span> <span class="pl-c1">&amp;&amp;</span> <span class="pl-s1">attrs</span><span class="pl-kos">.</span><span class="pl-c1">value</span> !== <span class="pl-s1">oldAttrs</span><span class="pl-kos">.</span><span class="pl-c1">value</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-en">setAttr</span><span class="pl-kos">(</span><span class="pl-s1">elm</span><span class="pl-kos">,</span> <span class="pl-s">'value'</span><span class="pl-kos">,</span> <span class="pl-s1">attrs</span><span class="pl-kos">.</span><span class="pl-c1">value</span><span class="pl-kos">)</span>
  <span class="pl-kos">}</span>
  <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">oldAttrs</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isUndef</span><span class="pl-kos">(</span><span class="pl-s1">attrs</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isXlink</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-s1">elm</span><span class="pl-kos">.</span><span class="pl-en">removeAttributeNS</span><span class="pl-kos">(</span><span class="pl-s1">xlinkNS</span><span class="pl-kos">,</span> <span class="pl-en">getXlinkProp</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span>!<span class="pl-en">isEnumeratedAttr</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
        <span class="pl-s1">elm</span><span class="pl-kos">.</span><span class="pl-en">removeAttribute</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span>
      <span class="pl-kos">}</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span>
<span class="pl-kos">}</span>

<span class="pl-c">/*设置attr*/</span>
<span class="pl-k">function</span> <span class="pl-en">setAttr</span> <span class="pl-kos">(</span><span class="pl-s1">el</span>: <span class="pl-v">Element</span><span class="pl-kos">,</span> <span class="pl-s1">key</span>: <span class="pl-s1">string</span><span class="pl-kos">,</span> <span class="pl-s1">value</span>: <span class="pl-s1">any</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isBooleanAttr</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">// set attribute for blank value</span>
    <span class="pl-c">// e.g. &lt;option disabled&gt;Select one&lt;/option&gt;</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isFalsyAttrValue</span><span class="pl-kos">(</span><span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">removeAttribute</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
      <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">setAttribute</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">,</span> <span class="pl-s1">key</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isEnumeratedAttr</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">setAttribute</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">,</span> <span class="pl-en">isFalsyAttrValue</span><span class="pl-kos">(</span><span class="pl-s1">value</span><span class="pl-kos">)</span> <span class="pl-c1">||</span> <span class="pl-s1">value</span> <span class="pl-c1">===</span> <span class="pl-s">'false'</span> ? <span class="pl-s">'false'</span> : <span class="pl-s">'true'</span><span class="pl-kos">)</span>
  <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isXlink</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isFalsyAttrValue</span><span class="pl-kos">(</span><span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">removeAttributeNS</span><span class="pl-kos">(</span><span class="pl-s1">xlinkNS</span><span class="pl-kos">,</span> <span class="pl-en">getXlinkProp</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
      <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">setAttributeNS</span><span class="pl-kos">(</span><span class="pl-s1">xlinkNS</span><span class="pl-kos">,</span> <span class="pl-s1">key</span><span class="pl-kos">,</span> <span class="pl-s1">value</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
    <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-en">isFalsyAttrValue</span><span class="pl-kos">(</span><span class="pl-s1">value</span><span class="pl-kos">)</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
      <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">removeAttribute</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-kos">{</span>
      <span class="pl-s1">el</span><span class="pl-kos">.</span><span class="pl-en">setAttribute</span><span class="pl-kos">(</span><span class="pl-s1">key</span><span class="pl-kos">,</span> <span class="pl-s1">value</span><span class="pl-kos">)</span>
    <span class="pl-kos">}</span>
  <span class="pl-kos">}</span>
<span class="pl-kos">}</span>

<span class="pl-k">export</span> <span class="pl-k">default</span> <span class="pl-kos">{</span>
  <span class="pl-c1">create</span>: <span class="pl-s1">updateAttrs</span><span class="pl-kos">,</span>
  <span class="pl-c1">update</span>: <span class="pl-s1">updateAttrs</span>
<span class="pl-kos">}</span></pre></div>
<p>attr只需要在create以及update钩子被调用时更新DOM的attr属性即可。</p>
</article>